buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url("https://plugins.gradle.org/m2/")
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.1")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.gearfound'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

ext['springCloudVersion'] = 'Greenwich.M3'

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.cloud:spring-cloud-starter-oauth2')
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('io.projectreactor:reactor-test')
	compileOnly "org.projectlombok:lombok:1.16.22"
	annotationProcessor("org.projectlombok:lombok:1.16.22")
	compile('javax.xml.bind:jaxb-api:2.3.1')
	compile('com.sun.xml.bind:jaxb-core:2.3.0.1')
	compile('com.sun.xml.bind:jaxb-impl:2.3.1')

	compile('javax.activation:activation:1.1')
	testImplementation(
			'org.junit.jupiter:junit-jupiter-api:5.3.2'
	)
	testRuntimeOnly(
			'org.junit.jupiter:junit-jupiter-engine:5.3.2',
			'org.junit.vintage:junit-vintage-engine:5.3.2'
	)
	testCompile('org.mockito:mockito-junit-jupiter:2.23.4')
}

test {
	useJUnitPlatform()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

docker {
	name "${project.group}/${bootJar.baseName}"
	files "build/libs/${bootJar.baseName}-${version}.jar"
	buildArgs([JAR_FILE: "${bootJar.baseName}-${version}.jar"])
}

task dockerBuild {
	dependsOn 'build'
	dependsOn 'docker'
	tasks.findByName('docker').mustRunAfter 'build'
}